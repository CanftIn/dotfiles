#!/usr/bin/env python3

import argparse
import os
import re
import subprocess
import sys
import webbrowser


def _convert_to_http(url):
    url = re.sub(r"^git@", "https://", url)
    url = re.sub(r"\.com:", ".com/", url)
    url = re.sub(r"\.org:", ".org/", url)
    url = re.sub(r".git$", "", url)
    return url


def _run_git_command(args):
    command = ["git"] + args
    devnull = open(os.devnull)
    output = subprocess.check_output(command, stderr=devnull)
    devnull.close()
    return output.decode().strip()


def _get_remotes():
    remotes = set([])
    lines = _run_git_command(["remote", "-v"]).split("\n")
    for line in lines:
        name, url, _ = line.split()
        remotes.add((name, _convert_to_http(url)))

    return remotes


def _get_remote(name):
    for remote_name, url in _get_remotes():
        if name == remote_name:
            return url

    return None


def _current_branch():
    return _run_git_command(["symbolic-ref", "--short", "HEAD"])


def _get_ref(ref):
    try:
        return _run_git_command(["rev-parse", ref])
    except subprocess.CalledProcessError:
        return None


def main(args):
    remotes = _get_remotes()
    try:
        url = next(url for (name, url) in remotes if name == args.remote)
    except StopIteration:
        print("No remotes found for '{}'".format(args.remote))
        sys.exit(1)

    if not args.argument:
        pass
    elif os.path.exists(args.argument):
        url = "{}/blob/{}/{}".format(url, _current_branch(), args.argument)
    elif _get_ref(args.argument):
        url = "{}/commit/{}".format(url, _get_ref(args.argument))
    elif _get_remote(args.argument):
        url = _get_remote(args.argument)
    else:
        url = os.path.join(url, args.argument)

    webbrowser.open_new_tab(url)


def _get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-r",
        "--remote",
        default="origin",
        required=False,
        help="The name of the remote to open",
    )
    parser.add_argument(
        "argument", nargs="?", help="The argument to try and open"
    )
    return parser


if __name__ == "__main__":
    main(_get_parser().parse_args())
